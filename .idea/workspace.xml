<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="ALL" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="8cd09f76-e327-4e01-81cc-e103578abe54" name="Changes" comment="" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="CoverageOptionsProvider">
    <option name="myAddOrReplace" value="0" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Go File" />
      </list>
    </option>
  </component>
  <component name="GOROOT" url="file://$PROJECT_DIR$/../../../../Program Files/Go" />
  <component name="Git.Settings">
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="main" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;Revasholeman&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;git@github.com:Revasholeman/golang.git&quot;,
    &quot;accountId&quot;: &quot;e7074b6a-31b6-4613-a5b1-7d8b91fdbd22&quot;
  }
}</component>
  <component name="ProjectColorInfo">{
  &quot;customColor&quot;: &quot;&quot;,
  &quot;associatedIndex&quot;: 5
}</component>
  <component name="ProjectId" id="2jSR0wgZhcNEMcZGiV8yPUa0xIQ" />
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="1" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;DefaultGoTemplateProperty&quot;: &quot;Go File&quot;,
    &quot;Go Build.go build golang.executor&quot;: &quot;Run&quot;,
    &quot;Go Test.TestNewProducer in golang/internal/producer.executor&quot;: &quot;Run&quot;,
    &quot;Go Test.TestNewService in golang/internal/service.executor&quot;: &quot;Run&quot;,
    &quot;Go Test.TestPresenter_present in golang/internal/presenter.executor&quot;: &quot;Run&quot;,
    &quot;Go Test.TestProducer_Produce in golang/internal/producer.executor&quot;: &quot;Run&quot;,
    &quot;Go Test.TestService_Run in golang/internal/service.executor&quot;: &quot;Run&quot;,
    &quot;Go Test.TestService_SpamMasker in golang/internal/service.executor&quot;: &quot;Run&quot;,
    &quot;Go Test.TestSpamMasker in golang.executor&quot;: &quot;Coverage&quot;,
    &quot;Go Test.TestSpamMasker/123_http:/hehe.HAHA in golang.executor&quot;: &quot;Run&quot;,
    &quot;Go Test.TestSpamMasker/123_http:/hehe.HAHA_123 in golang.executor&quot;: &quot;Run&quot;,
    &quot;Go Test.TestSpamMasker/1_http:/hehe123.HAHA_1 in golang.executor&quot;: &quot;Run&quot;,
    &quot;Go Test.TestSpamMasker/http:/hehe.HAHA in golang.executor&quot;: &quot;Run&quot;,
    &quot;Go Test.TestSpamMasker/http:/hehe.HAHA_123 in golang.executor&quot;: &quot;Run&quot;,
    &quot;Go Test.TestSpamMasker_ in golang.executor&quot;: &quot;Run&quot;,
    &quot;Go Test.TestSpamMasker_/123_http:/hehe.HAHA in golang.executor&quot;: &quot;Run&quot;,
    &quot;Go Test.TestSpamMasker_/1_http:/hehe123.HAHA_1 in golang.executor&quot;: &quot;Run&quot;,
    &quot;Go Test.TestSpamMasker_/http:/hehe.HAHA in golang.executor&quot;: &quot;Run&quot;,
    &quot;Go Test.go test golang.executor&quot;: &quot;Run&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.go.formatter.settings.were.checked&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.go.migrated.go.modules.settings&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.go.modules.automatic.dependencies.download&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.go.modules.go.list.on.any.changes.was.set&quot;: &quot;true&quot;,
    &quot;git-widget-placeholder&quot;: &quot;#4 on dev&quot;,
    &quot;go.import.settings.migrated&quot;: &quot;true&quot;,
    &quot;go.sdk.automatically.set&quot;: &quot;true&quot;,
    &quot;last_opened_file_path&quot;: &quot;C:/Users/home/GolandProjects/golang/internal/producer&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;
  }
}</component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\Lenovo\GolandProjects\golang\internal\service" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\Users\home\GolandProjects\golang\internal\producer" />
      <recent name="C:\Users\home\GolandProjects\golang\internal\presenter" />
      <recent name="C:\Users\Lenovo\GolandProjects\golang\app" />
      <recent name="C:\Users\Lenovo\GolandProjects\golang" />
      <recent name="C:\Users\Lenovo\GolandProjects\golang\internal" />
    </key>
  </component>
  <component name="RunManager" selected="Go Test.TestService_Run in golang/internal/service">
    <configuration name="TestNewProducer in golang/internal/producer" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="golang" />
      <working_directory value="$PROJECT_DIR$/internal/producer" />
      <root_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="golang/internal/producer" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <pattern value="^\QTestNewProducer\E$" />
      <method v="2" />
    </configuration>
    <configuration name="TestPresenter_present in golang/internal/presenter" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="golang" />
      <working_directory value="$PROJECT_DIR$/internal/presenter" />
      <root_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="golang/internal/presenter" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <pattern value="^\QTestPresenter_present\E$" />
      <method v="2" />
    </configuration>
    <configuration name="TestProducer_Produce in golang/internal/producer" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="golang" />
      <working_directory value="$PROJECT_DIR$/internal/producer" />
      <root_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="golang/internal/producer" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <pattern value="^\QTestProducer_Produce\E$" />
      <method v="2" />
    </configuration>
    <configuration name="TestService_Run in golang/internal/service" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="golang" />
      <working_directory value="$PROJECT_DIR$/internal/service" />
      <root_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="golang/internal/service" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <pattern value="^\QTestService_Run\E$" />
      <method v="2" />
    </configuration>
    <configuration name="TestService_SpamMasker in golang/internal/service" type="GoTestRunConfiguration" factoryName="Go Test" temporary="true" nameIsGenerated="true">
      <module name="golang" />
      <working_directory value="$PROJECT_DIR$/internal/service" />
      <root_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="golang/internal/service" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$" />
      <framework value="gotest" />
      <pattern value="^\QTestService_SpamMasker\E$" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Go Test.TestService_Run in golang/internal/service" />
        <item itemvalue="Go Test.TestProducer_Produce in golang/internal/producer" />
        <item itemvalue="Go Test.TestPresenter_present in golang/internal/presenter" />
        <item itemvalue="Go Test.TestNewProducer in golang/internal/producer" />
        <item itemvalue="Go Test.TestService_SpamMasker in golang/internal/service" />
      </list>
    </recent_temporary>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-gosdk-33c477a475b1-e0158606a674-org.jetbrains.plugins.go.sharedIndexes.bundled-GO-241.18034.61" />
        <option value="bundled-js-predefined-1d06a55b98c1-0b3e54e931b4-JavaScript-GO-241.18034.61" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VgoProject">
    <settings-migrated>true</settings-migrated>
  </component>
  <component name="com.intellij.coverage.CoverageDataManagerImpl">
    <SUITE FILE_PATH="coverage/golang$TestSpamMasker_in_golang.out" NAME="TestSpamMasker in golang Coverage Results" MODIFIED="1721384840801" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="GoCoverage" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
  </component>
</project>